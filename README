Это репозиторий с распределенной системой логирования.

Состоит из двух программ:
1. rclogd -- демон, выполняет следующие функции: 
    Команда для запуска: rclogd <socket_path>
    a) Принимает логи от локальных процессов и сохраняет их в локальную базу. Локальные процессы передают логи через UNIX сокет.
    b) Выполняет обмен логами с другими узлами.
2. rclogger -- клиент, для отправки логов в rclogd. Является примером взаимодействия локального процесса с rclogd.


Заметки:
1. Локальный сокет является UNIX DGRAM сокетом. На данный момент имеет фиксированный статический буфер.
Если логи могут быть большими, то возможно стоит сделать так: http://stackoverflow.com/questions/20419704/variable-size-buffer-for-receiving-udp-packets.
А возможно имеет смысл использовать STREAM сокет.
В текущей версии, если сообщение привышает размер буфера, то невместившаяся информация теряется (на такую ситуацию нет сообщения).

2. Сейчас всё происходит в одном потоке. Это можно легко изменить с помощью способа описанного здесь:
http://www.boost.org/doc/libs/1_64_0/doc/html/boost_asio/tutorial/tuttimer5.html

3. Json парсится с помощью boost'a. Возможно не лучшее решение.

4. Управляющие поля добавляются на сервере, изза этого, например нельзя идентифицировать процесс-отправитель. Возможно стоит принудить заполнять поля на стороне клиента.

5. DatabaseManager сейчас не потокобезопасен. Учесть это в будущем, если нужно будет его дергать из разных потоков!

6. На данный момент используемая база данных задается в аргументах командной строки. Возможно стоит переделать через флаг для компиляции.


Вопросы:
1. Нужно ли оповещать клиента, если его сообщение не удалось добавить в базу? (Это ухудшит пропускную способность системы)

TODO:


Зависимости:
1. boost
2. libmongoc
3. libmongocxx
